// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Threax.Home.Database;

namespace Threax.Home.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20201129152655_buttonstateicon")]
    partial class buttonstateicon
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Threax.AspNetCore.UserBuilder.Entities.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.HasKey("RoleId");

                    b.ToTable("spc.auth.Roles");
                });

            modelBuilder.Entity("Threax.AspNetCore.UserBuilder.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("spc.auth.Users");
                });

            modelBuilder.Entity("Threax.AspNetCore.UserBuilder.Entities.UserToRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("spc.auth.UsersToRoles");
                });

            modelBuilder.Entity("Threax.Home.Database.ButtonEntity", b =>
                {
                    b.Property<Guid>("ButtonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("ButtonType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Label")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("ButtonId");

                    b.ToTable("Buttons");
                });

            modelBuilder.Entity("Threax.Home.Database.ButtonStateEntity", b =>
                {
                    b.Property<Guid>("ButtonStateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ButtonId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<int>("Icon")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("ButtonStateId");

                    b.HasIndex("ButtonId");

                    b.ToTable("ButtonStates");
                });

            modelBuilder.Entity("Threax.Home.Database.SensorEntity", b =>
                {
                    b.Property<Guid>("SensorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Bridge")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<int?>("HumidityUnits")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("HumidityValue")
                        .HasColumnType("REAL");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.Property<int?>("LightUnits")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("LightValue")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.Property<string>("Subsystem")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TempUnits")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("TempValue")
                        .HasColumnType("REAL");

                    b.Property<int?>("UvUnits")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("UvValue")
                        .HasColumnType("REAL");

                    b.HasKey("SensorId");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("Threax.Home.Database.SwitchEntity", b =>
                {
                    b.Property<Guid>("SwitchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Bridge")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.Property<byte?>("Brightness")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("HexColor")
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.Property<string>("Subsystem")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.HasKey("SwitchId");

                    b.HasIndex("Bridge", "Subsystem", "Id")
                        .IsUnique();

                    b.ToTable("Switches");
                });

            modelBuilder.Entity("Threax.Home.Database.SwitchSettingEntity", b =>
                {
                    b.Property<Guid>("SwitchSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Brightness")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ButtonStateId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("HexColor")
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SwitchId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("SwitchSettingId");

                    b.HasIndex("ButtonStateId");

                    b.HasIndex("SwitchId");

                    b.ToTable("SwitchSettings");
                });

            modelBuilder.Entity("Threax.Home.Database.ThermostatEntity", b =>
                {
                    b.Property<Guid>("ThermostatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AvailableModes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Away")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bridge")
                        .HasColumnType("TEXT");

                    b.Property<int>("CoolTemp")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CoolTempMax")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CoolTempMin")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<int>("Fan")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FanState")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ForceUnocc")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HeatTemp")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HeatTempMax")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HeatTempMin")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Holidy")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Humidity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("Mode")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Override")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OverrideTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Schedule")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SchedulePart")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SetPointDelta")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SpaceTemp")
                        .HasColumnType("INTEGER");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Subsystem")
                        .HasColumnType("TEXT");

                    b.Property<int>("TempUnits")
                        .HasColumnType("INTEGER");

                    b.HasKey("ThermostatId");

                    b.ToTable("Thermostats");
                });

            modelBuilder.Entity("Threax.Home.Database.ThermostatSettingEntity", b =>
                {
                    b.Property<Guid>("ThermostatSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("CoolTemp")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<int>("HeatTemp")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<bool>("On")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ThermostatId")
                        .HasColumnType("TEXT");

                    b.HasKey("ThermostatSettingId");

                    b.ToTable("ThermostatSettings");
                });

            modelBuilder.Entity("Threax.AspNetCore.UserBuilder.Entities.UserToRole", b =>
                {
                    b.HasOne("Threax.AspNetCore.UserBuilder.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Threax.AspNetCore.UserBuilder.Entities.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Threax.Home.Database.ButtonStateEntity", b =>
                {
                    b.HasOne("Threax.Home.Database.ButtonEntity", "Button")
                        .WithMany("ButtonStates")
                        .HasForeignKey("ButtonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Button");
                });

            modelBuilder.Entity("Threax.Home.Database.SwitchSettingEntity", b =>
                {
                    b.HasOne("Threax.Home.Database.ButtonStateEntity", "ButtonState")
                        .WithMany("SwitchSettings")
                        .HasForeignKey("ButtonStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Threax.Home.Database.SwitchEntity", "Switch")
                        .WithMany("SwitchSettings")
                        .HasForeignKey("SwitchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ButtonState");

                    b.Navigation("Switch");
                });

            modelBuilder.Entity("Threax.AspNetCore.UserBuilder.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Threax.AspNetCore.UserBuilder.Entities.User", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Threax.Home.Database.ButtonEntity", b =>
                {
                    b.Navigation("ButtonStates");
                });

            modelBuilder.Entity("Threax.Home.Database.ButtonStateEntity", b =>
                {
                    b.Navigation("SwitchSettings");
                });

            modelBuilder.Entity("Threax.Home.Database.SwitchEntity", b =>
                {
                    b.Navigation("SwitchSettings");
                });
#pragma warning restore 612, 618
        }
    }
}
